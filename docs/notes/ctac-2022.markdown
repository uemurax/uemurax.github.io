---
layout: default
---

# 「正しい」圏論

この文書は[圏論 Advent Calendar 2022](https://adventar.org/calendars/7888)の17日目の記事です。

## 概要

「正しい」圏の定義を紹介します。主に [(Ahrens et al., 2015)](#aks2015) と [(HoTT Book)](#hottbook) の9章の内容です。

## はじめに

まずは圏の定義を確認しましょう。圏 `C` とは次の要素からなる構造です。

*   対象のなす集合 `Obj C`
*   対象 `x : Obj C` と `y : Obj C` に対し、射のなす集合 `Hom C x y`
*   恒等射、合成、単位律、結合律

この定義は「正しい」でしょうか。もちろん正しいのですが、少し微妙な点があります。それは圏がどう**同一視**されるかです。圏に対しては少なくとも4つの同一視の概念が考えられます。

1.  メタ理論における標準的な等しさ (例えば集合論では集合としての等しさ)
2.  代数構造としての同型 (圏同型)
3.  圏同値 (合成が恒等関手と自然同型という意味で逆関手を持つ)
4.  弱圏同値 (充満忠実かつ本質的全射)

流石に集合としての等しさを論じることはないと思いますが、圏同型はしばしば登場します。群同型、環同型などから類推できる自然な概念です。しかし、「正しい」圏の同一視のしかたはもちろん圏同値です。圏同値と弱圏同値はもちろん同値ですが、それはあくまで定理なのでいったん区別しておきます。同一視の概念が複数あるのは非常に煩わしいことです。2-圏論とか。

もう一つ微妙な点があります。圏同値と弱圏同値の同値性を示すには**選択公理**を使います。これは同型を除いて一意な対象を選択する必要があるからです。しかし、同型を除いてとはいえ**一意**な対象を選択するというは不自然な話です。また、具体的な圏同値を思い浮かべると、本質的全射の証明では具体的な**構成**が与えられることがほとんどです。圏論に選択公理が要るはずがありません。

この文書では、上に挙げた4つの圏の同一視の概念が**すべて同値**になるような圏の定義を紹介します。また、その同値性は**構成的**に証明されます。もちろん選択公理は要りません。

## メタ理論: Univalent Foundations

この文書では **Univalent Foundations** [(HoTT Book)](#hottbook) をメタ理論として採用します。これは筆者の趣味というだけでなくこの文書において本質的です。というのも、例えば (公理的または素朴) 集合論においては圏同型と圏同値はそもそも同値ではありません。もっと言えば集合としての等しさと代数構造としての同型が同値になることはほぼありません。集合としての等しさは常に**命題**であり、要素を高々1つしか持たない集合と考えられます。一方、代数構造としての同型は複数ありえます。この2つの概念を同値とみなすことを正当化することは等しさが常に命題であるようなメタ理論を採用する限り難しいと言えます。

### 型

Univalent Foundations は Martin-Löf の**依存型理論** [(Martin-Löf, 1975)](#ml1975) をベースとします。このメタ理論では数学は**型**やその**要素**を**構成**することで営まれます。命題という概念は組み込まれていません。型とは素朴な意味で集合に近い概念で、その要素は集合の要素のようなものです。 `A` が型であることは `A : Type` と書き、 `a` が型 `A` の要素であることは `a : A` と書きます。型 `A` に対し、　**`A` 上の依存型**は `A` で添え字付けられた集合族のようなもので、 `B : A -> Type` のように書きます。

### 同一視の型

型 `A` とその要素 `a : A` と `b : A` に対し、**同一視の型 (identity type)** `a = b` が構成できます。もともとの気持ちは `a` と `b` が等しいという命題だったのですが、 Univalent Foundations の文脈では `a = b` の要素は `a` と `b` の**同一視のしかた**と考えます。普通の等式と違って **`a = b` は複数の異なる要素を持ちえます**。普通の等式と同様に、**あらゆる構成は同一視を保ちます**。例えば関数 `f : A -> B` と `a : A` と `b : A` に対し、関数 `ap f : a = b -> f a = f b` が誘導されます。

### その他の型

すでに言及しましたが、型 `A` と `B` に対して、**関数型** `A -> B` が構成できて、その要素は関数です。もっと一般に、依存型 `B : A -> Type` に対して、**依存関数型** `(x : A) -> B x` が構成できて、その要素は `x : A` に対して `B x` の要素を返す関数です。返り値の型が引数に依存するのでこのような関数は依存関数と呼ばれます。

型 `A` と `B` に対して、**対の型** `A * B` が構成できて、その要素は `a : A` と `b : B` の対 `(a, b)` です。もっと一般に、依存型 `B : A -> Type` に対して、**依存対の型** `(x : A) * B x` が構成できて、その要素は `a : A` と `b : B a` の対 `(a, b)` です。2番目の要素の型が1番目の要素に依存するのでこのような対は依存対と呼ばれます。

### Truncation level

型 `A` に対して、型 `Contractible A` を `(a : A) * ((x : A) -> a = x)` と定義します。これは要素 `a : A` があって他のすべての要素 `x : A` は `a` と同一視されることを表します。つまり、 `A` はただ一つの要素を持つということです。 Contractible (可縮) という用語はホモトピー論から来ます。

`n : {-2, -1, 0, ...}` に対して、型 `Truncated n A` を帰納的に `Truncated (-2) A := Contractible A` と `Truncated (n + 1) A := (x, y : A) -> Truncated n (x = y)` で定義します。例えば、 `Truncated (-1) A := (x, y : A) -> Contractible (x = y)` は任意の `x, y : A` に対して、ただ一つの `x` と `y` の同一視のしかたがあるとういこと、つまり `A` の要素は高々一つであることを表します。 `Truncated (-1) A` の要素がある時 `A` は従来の命題のようにふるまうため、 `IsProposition A := Truncated (-1) A` と書くこともあります。 `Truncated 0 A := (x, y : A) -> IsProposition (x = y)` は　`A` の要素の同一視の型 `x = y` が命題であること、つまり `A` は従来の集合のようにふるまうことを表します。そのため、 `IsSet A := Truncated 0 A` と書くこともあります。

### Univalence

`A : Type` と `a : A` を同じ記法で書いていますが、これは `Type` という記号は要素が型であるような型であるということです。正確には、 `Type` 自身が `Type` の要素であると矛盾が起こる (Girard のパラドックス) ので、 `Type 0 : Type 1 : Type 2 : ...` のように階層付けられています。単に `Type` と書いた時はいい感じに階数が補完されていると考えます。

## 参考文献

*   <span id="aks2015"></span>
    Benedikt Ahrens, Krzysztof Kapulkin, and Michael Shulman.
    "Univalent categories and the Rezk completion."
    Mathematical Structures in Computer Science 25.5 (2015): 1010-1039.
    [doi:10.1017/S0960129514000486](https://doi.org/10.1017/S0960129514000486)
    [arXiv:1303.0584](https://arxiv.org/abs/1303.0584)
*   <span id="hottbook"></span>
    The Univalent Foundations Program.
    "Homotopy Type Theory: Univalent Foundations of Mathematics."
    Institute for Advanced Study, 2013.
    <https://homotopytypetheory.org/book/>
*   <span id="ml1975"></span>
    Per Martin-Löf.
    "An intuitionistic theory of types: Predicative part."
    Studies in Logic and the Foundations of Mathematics. Vol. 80. Elsevier, 1975. 73-118.
    [doi:10.1016/S0049-237X(08)71945-1](https://doi.org/10.1016/S0049-237X(08)71945-1)
